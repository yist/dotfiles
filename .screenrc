#
# Example of a user's .screenrc file
#
# This is how one can set a reattach password:
# password ODSJQf.4IJN7E    # "1234"
# no annoying audible bell, please
vbell off
# detach on hangup
autodetach on
# Support alternate screens so that, for example, when you quit out of vi,
# the display is redrawn as it was before vi # redrew the full screen.
altscreen on
# don't display the copyright page
startup_message off
# emulate .logout message
pow_detach_msg "Screen session of \$LOGNAME \$:cr:\$:nl:ended."
# Select line break behavior for copying.
crlf off             # default: off
# For Vim under screen to work
maptimeout 5
defscrollback 5000
defutf8 on
# Set $TERM for new windows. I have more luck with 'linux' than Terminal's
# default 'xterm-color' (^H problems). Comment out to use the default.
#term                  linux
# Tweak termcap, terminfo, and termcapinfo  entries for best performance.
termcap               linux           'AF=\E[3%dm:AB=\E[4%dm:Z0=\E[?3h:Z1=\E[?3l'
termcap               xterm-color     'AF=\E[3%dm:AB=\E[4%dm:Z0=\E[?3h:Z1=\E[?3l'
terminfo              linux           'AF=\E[3%p1%dm:AB=\E[4%p1%dm'
terminfo              xterm-color     'AF=\E[3%p1%dm:AB=\E[4%p1%dm'
# Allow xterm / Terminal scrollbars to access the scrollback buffer. This
# enables the behavior you'd expect, instead of losing the content that scrolls
# out of the window.
termcapinfo           linux           ti@:te@
termcapinfo           xterm-color     ti@:te@
# terminfo and termcap for nice 256 color terminal
# allow bold colors - necessary for some reason
attrcolor b ".I"
# tell screen how to set colors. AB = background, AF=foreground
termcapinfo xterm 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
termcapinfo linux 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
# erase background with current bg color
defbce "on"
################
#
# keybindings
#
#remove some stupid / dangerous key bindings
bind k
bind ^k
bind .
bind ^\
bind \\
bind ^h
bind h
#make them better
bind 'K' kill
bind 'I' login on
bind 'O' login off
bind '}' history
bind -c dualpane 0 eval split focus 'select 0'
bind -c dualpane 1 eval split focus 'select 1'
bind -c dualpane 2 eval split focus 'select 2'
bind -c dualpane 3 eval split focus 'select 3'
bind -c dualpane 4 eval split focus 'select 4'
bind -c dualpane 5 eval split focus 'select 5'
bind -c dualpane 6 eval split focus 'select 6'
bind -c dualpane 7 eval split focus 'select 7'
bind -c dualpane 8 eval split focus 'select 8'
bind -c dualpane 9 eval split focus 'select 9'
bind -c dualpane _ only
bindkey ^_ command -c dualpane
bind -c vdualpane 0 eval 'split -v' focus 'select 0'
bind -c vdualpane 1 eval 'split -v' focus 'select 1'
bind -c vdualpane 2 eval 'split -v' focus 'select 2'
bind -c vdualpane 3 eval 'split -v' focus 'select 3'
bind -c vdualpane 4 eval 'split -v' focus 'select 4'
bind -c vdualpane 5 eval 'split -v' focus 'select 5'
bind -c vdualpane 6 eval 'split -v' focus 'select 6'
bind -c vdualpane \ only
bindkey ^\ command -c vdualpane
# Yet another hack:
# Prepend/append register [/] to the paste if ^a^] is pressed.
# This lets me have autoindent mode in vi.
#register [ "\033:se noai\015a"
#register ] "\033:se ai\015a"
#bind ^] paste [.]
# This sets the value of %1` to the output of the command, and refreshes it
# once 5 minutes.
#backtick 1 300 300 ~/bin/status.sh loascolorswap
################
#
# default windows
#
# screen -t local 0
# screen -t mail 1 elm
# screen -t 40 2 rlogin faui40
#caption always "%3n %t%? @%u%?%? [%h]%?"
# hardstatus alwaysignore
# hardstatus alwayslastline "%w"
#caption always "%{= kB}%-Lw%{=s kB}%50>%n%f* %t %{-}%+Lw%<"
#caption always "%{-b wb}%?%-Lw%?%{+b Wb}%n*%f %t%?(%u)%?%{-b wb}%?%+Lw%?"
caption always "%?%F%{=r}%:%{=r}%? SCREEN@%H | %?%F%{=r}%?%-Lw%45>%{=u}%n%f %t%{-}%+Lw%-0< %=[%l]%1`"
msgminwait 3
msgwait 10
